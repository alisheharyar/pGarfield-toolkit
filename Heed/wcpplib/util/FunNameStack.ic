/*
Copyright (c) 1999 I. B. Smirnov

Permission to use, copy, modify, distribute and sell this file for any purpose
is hereby granted without fee, provided that the above copyright notice,
this permission notice, and notices about any modifications of the original
text appear in all copies and in supporting documentation.
The file is provided "as is" without express or implied warranty.
*/
using std::cerr;

int FunNameStack::put(const char* fname) {
  //if(s_init != 1) init();
  if (s_act != 1) return 0;
#ifdef USE_BOOST_MULTITHREADING
  NameStack* ns = get_thread_stack();
  if (ns->qname >= pqname) {
    mcerr << "FunNameStack::put: error: qname == pqname\n";
    mcerr << "Most oftenly this happens due to infinite recursion.\n";
    mcerr << "ns->id=" << ns->id << '\n';
    mcerr << "*this=" << (*this);
    exit(1);
  }
  ns->name[ns->qname++] = fname;
  if (s_print > 0) {
    printput(mcout);
  }
  return ns->qname - 1;
#else
  if (qname >= pqname) {
    mcerr << "FunNameStack::put: error: qname == pqname\n";
    mcerr << "Most oftenly this happens due to infinite recursion.\n";
    mcerr << "*this=" << (*this);
    exit(1);
  }
  name[qname++] = const_cast<char*>(fname);
  if (s_print > 0) {
    printput(mcout);
  }
  return qname - 1;
#endif
}

void FunNameStack::del(int nname) {
  if (s_act != 1) return;
#ifdef USE_BOOST_MULTITHREADING
  NameStack* ns = get_thread_stack();
  if (nname != ns->qname - 1)  // not last
      {
    ns->qname = nname;
    //cerr<<"FunNameStack::del: error: nname != qname-1\n"; exit(1);
  } else {
    if (s_print > 0) {
      printdel(mcout);
    }
    ns->qname--;
  }
  if (ns->qname == 0) remove_thread_stack();
#else
  if (nname != qname - 1)  // not last
      {
    qname = nname;
    //cerr<<"FunNameStack::del: error: nname != qname-1\n"; exit(1);
  } else {
    if (s_print > 0) {
      printdel(mcout);
    }
    qname--;
  }
#endif
}

void FunNameStack::replace(const char* fname) {
  //if(s_init != 1) init();
  if (s_act != 1) return;
#ifdef USE_BOOST_MULTITHREADING
  NameStack* ns = get_thread_stack();
  if (ns->qname >= pqname) {
    mcerr << "FunNameStack::put: error: qname == pqname\n";
    mcerr << "Most oftenly this happens due to infinite recursion.\n";
    mcerr << "ns->id=" << ns->id << '\n';
    mcerr << "*this=" << (*this);
    exit(1);
  }
  ns->name[ns->qname - 1] = fname;
  if (s_print > 0) {
    printput(mcout);
  }
#else
  if (qname >= pqname) {
    mcerr << "FunNameStack::put: error: qname == pqname\n";
    mcerr << "Most oftenly this happens due to infinite recursion.\n";
    mcerr << "*this=" << (*this);
    exit(1);
  }
  name[qname - 1] = const_cast<char*>(fname);
  if (s_print > 0) {
    printput(mcout);
  }
#endif
}

FunNameWatch::FunNameWatch(const char* fname) : name(fname) {
  //#ifdef FUNNAMESTACK
  nname = FunNameStack::instance().put(fname);
  //#else
  //nname=0;
  //#endif
}
FunNameWatch::~FunNameWatch() {
  //#ifdef FUNNAMESTACK
  if (nname >= 0) FunNameStack::instance().del(nname);
  //#endif
}
